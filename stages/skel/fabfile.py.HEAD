
#
# AUTOGENERATED CODE
#

#
# DO NOT TOUCH THIS CODE
#

#
# Copyright (c) 2015 Midokura SARL, All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

import os

import sys

from chimata.config import Config

from chimata.utils import Puppet,Daemon

from fabric.api import env,parallel,roles,run,local
from fabric.colors import red,yellow,green
from fabric.utils import puts

import cuisine

metadata = Config(os.environ["CONFIGFILE"])

#
# this code was autogenerated by %%GENERATOR%%.
#
# do not modify it, all changes will be overwritten!
#
@roles('%%ROLE%%')
def %%ROLE%%():

    chimata_lockfile = "/tmp/.chimata_lockfile__%s.%s__%s__lck" % (env.host_string, metadata.config["domain"], sys._getframe().f_code.co_name)

#   #
#   #   PROLOGUE
#   #

    #
    # if NODEPS is active dont poll the lock
    #
    if not "NODEPS" in os.environ:

        #
        # only check the lockfile for jobs that allow it
        #
        if sys._getframe().f_code.co_name not in metadata.config["no_lock_check"]:

            #
            # if the lockfile exists we must not run this method again
            #
            if cuisine.file_exists(chimata_lockfile):
                if metadata.config['verbose'] == True:
                    puts(yellow("skipping task %s on %s (lockfile exists)" % (sys._getframe().f_code.co_name, env.host_string)))

                return
        else:
            if metadata.config['debug'] == True:
                puts(yellow("not checking lockfile for task %s on %s" % (sys._getframe().f_code.co_name, env.host_string)))

    puts(green("********************************************************************************"))
    puts(green("running remote task %s on %s" % (sys._getframe().f_code.co_name, env.host_string)))
    puts(green("********************************************************************************"))

#   #
#   #   END OF PROLOGUE
#   #

