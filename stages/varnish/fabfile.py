
    director_backends = []
    backends = []

    run("""

mkdir -pv /etc/varnish

""")

    cuisine.package_ensure("varnish")

    run("""

test -f /etc/varnish/default.vcl.DISTRIBUTION || \
    cp /etc/varnish/default.vcl /etc/varnish/default.vcl.DISTRIBUTION

""")

    for server in sorted(metadata.servers):
        if 'applications' in metadata.servers[server]:
            for application in sorted(metadata.servers[server]['applications']):
                for container in sorted(metadata.servers[server]['applications'][application]):
                    container_ip = metadata.servers[server]['applications'][application][container]['ip']

                    if metadata.config["debug"] == True:
                        puts(red("adding varnish backend %s/%s/%s (%s)" % (server, application, container, container_ip)))

                    #
                    # round-robin backends have no weight
                    #
                    if metadata.config["varnish_director_policy"] == "round-robin":
                        director_backends.append("""    {
        .backend = %s_%s_%s;
    }
""" % (server, application, container))

                    #
                    # random backends get a weight parameter
                    #
                    if metadata.config["varnish_director_policy"] == "random":
                        #
                        # is it a local container that is on the same box as the varnish? give it more weight
                        #
                        if env.host_string == server:
                            weight = 200
                        else:
                            weight = 100

                        director_backends.append("""    {
        .backend = %s_%s_%s;
        .weight = %s;
    }
""" % (server, application, container, weight))

                    #
                    # build the backends array
                    #
                    backends.append("""backend %s_%s_%s {
    .host                  = "%s";
    .port                  = "80";
    .connect_timeout       = 5s;
    .first_byte_timeout    = 30s;
    .between_bytes_timeout = 30s;
    .max_connections       = 100;
    .saintmode_threshold   = 100;

    .probe = {
                .url       = "%s";
                .interval  = 10s;
                .timeout   = 10s;
                .window    = 5;
                .threshold = 3;
    }
}
""" % (
        server,
        application,
        container,
        container_ip,
        metadata.config['varnish_backend_probe_url']
    ))

                #
                # build the director and the backends
                #
                director = """
director %s_%s_director %s {
%s
} """ % (
            env.host_string,
            application,
            metadata.config['varnish_director_policy'],
            "\n".join(director_backends
        ))

                if metadata.config["debug"] == True:
                    puts(red("adding director for application %s: %s" % (application, director)))


    #
    # write the final config to the machine
    #
    cuisine.file_write("/etc/varnish/default.vcl", """
#
# this file has been autogenerated
#

""")

    cuisine.file_append("/etc/varnish/default.vcl", "\n".join(backends))

    cuisine.file_append("/etc/varnish/default.vcl", director)

    #
    # https://www.varnish-cache.org/trac/wiki/VCLExampleDirector
    #
    cuisine.file_append("/etc/varnish/default.vcl", """

#
# use the application director for all incoming traffic, add some debugging info
#

sub vcl_recv {
    set req.backend = %s_%s_director;

    set req.http.X-REQ-Backend = req.backend;
    set req.http.X-REQ-Request = "" + client.ip + " -> " + req.http.host + req.url;
}

#
# add backend response headers
#

sub vcl_fetch {
    unset beresp.http.x-powered-by;
    set beresp.grace = 24h;

    set beresp.http.X-BERESP-Backend-IP = "" + beresp.backend.ip + ":" + beresp.backend.port + " (" + beresp.backend.name + ")";
}

#
# send them back to the client for debugging
#

sub vcl_deliver {
  set resp.http.X-REQ-Backend = req.http.X-REQ-Backend;
  set resp.http.X-REQ-Request = req.http.X-REQ-Request;
}

""" % (env.host_string, application))

    run("""

service varnish restart

ps axufww | grep -v grep | grep varnish

""")

